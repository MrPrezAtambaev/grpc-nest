// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: proto/todo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type handleUnaryCall, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "todo";

export interface FindOneHeroConditions {
  id: number;
}

export interface FindAllHeroConditions {
}

export interface Todo {
  id: number;
  name: string;
  type: string;
}

export interface Todos {
  todos: Todo[];
}

export const TODO_PACKAGE_NAME = "todo";

function createBaseFindOneHeroConditions(): FindOneHeroConditions {
  return { id: 0 };
}

export const FindOneHeroConditions: MessageFns<FindOneHeroConditions> = {
  encode(message: FindOneHeroConditions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindOneHeroConditions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindOneHeroConditions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFindAllHeroConditions(): FindAllHeroConditions {
  return {};
}

export const FindAllHeroConditions: MessageFns<FindAllHeroConditions> = {
  encode(_: FindAllHeroConditions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindAllHeroConditions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindAllHeroConditions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseTodo(): Todo {
  return { id: 0, name: "", type: "" };
}

export const Todo: MessageFns<Todo> = {
  encode(message: Todo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Todo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTodo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseTodos(): Todos {
  return { todos: [] };
}

export const Todos: MessageFns<Todos> = {
  encode(message: Todos, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.todos) {
      Todo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Todos {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTodos();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.todos.push(Todo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface TodoServiceClient {
  findOne(request: FindOneHeroConditions): Observable<Todo>;

  findAll(request: FindAllHeroConditions): Observable<Todos>;
}

export interface TodoServiceController {
  findOne(request: FindOneHeroConditions): Promise<Todo> | Observable<Todo> | Todo;

  findAll(request: FindAllHeroConditions): Promise<Todos> | Observable<Todos> | Todos;
}

export function TodoServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findOne", "findAll"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TODO_SERVICE_NAME = "TodoService";

export type TodoServiceService = typeof TodoServiceService;
export const TodoServiceService = {
  findOne: {
    path: "/todo.TodoService/FindOne",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindOneHeroConditions) => Buffer.from(FindOneHeroConditions.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindOneHeroConditions.decode(value),
    responseSerialize: (value: Todo) => Buffer.from(Todo.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Todo.decode(value),
  },
  findAll: {
    path: "/todo.TodoService/FindAll",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindAllHeroConditions) => Buffer.from(FindAllHeroConditions.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindAllHeroConditions.decode(value),
    responseSerialize: (value: Todos) => Buffer.from(Todos.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Todos.decode(value),
  },
} as const;

export interface TodoServiceServer extends UntypedServiceImplementation {
  findOne: handleUnaryCall<FindOneHeroConditions, Todo>;
  findAll: handleUnaryCall<FindAllHeroConditions, Todos>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
